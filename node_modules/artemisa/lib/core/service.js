'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dataService = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _actions = require('./actions');

var _fetch = require('./fetch');

/* eslint no-unused-vars: 0 */
var dataService = exports.dataService = function dataService(store) {
  return function (next) {
    return function (action) {
      next(action);
      return (0, _actions.isApiCall)(action) ? callEndpoint(store, action, next) : Promise.resolve();
    };
  };
};

function callEndpoint(store, action, next) {
  next((0, _actions.onRequestActionCreator)(action));

  return doCallEndpoint((0, _actions.callFromAction)(store, action), next, (0, _actions.onReceiveActionCreator)(action), (0, _actions.onErrorActionCreator)(action), store);
}

// data Service as an object to configure transformations
dataService.transformations = [];
dataService.registerTransformation = function (actionType, fn) {
  dataService.transformations[actionType] = fn;
};

var transformReceiveAction = function transformReceiveAction(receive, store) {
  return _extends({}, receive, {
    data: transform(receive.originType, receive.data, store)
  });
};

var transform = function transform(actionType, value, store) {
  var t = dataService.transformations[actionType];
  return t ? t(value, store) : value;
};

/* eslint-disable no-console */
function doCallEndpoint(callSpec, next, onReceive, onError, store) {
  var method = callSpec.method,
      path = callSpec.path,
      urlParams = callSpec.urlParams,
      body = callSpec.body,
      token = callSpec.token;

  return (0, _fetch.apiFetch)((0, _fetch.compileUrl)(path, urlParams), (0, _fetch.fetchOptions)(method, body, token)).then(function (response) {
    return (
      // TODO
      // if (response.status === 401) {
      //   next(unauthorized());
      // }
      response.ok ? response.json().then(function (json) {
        return next(transformReceiveAction(onReceive(json), store));
      }) : response.json().then(function (json) {
        return next(onError(json.error.message));
      })
    );
  }).catch(function (error) {
    console.error('ERROR on API Call', error);
    next(onError(error.message));
  });
}