'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.compileUrl = exports.LOGOUT = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports.apiFetch = apiFetch;
exports.fetchOptions = fetchOptions;

var _isomorphicFetch = require('isomorphic-fetch');

var _isomorphicFetch2 = _interopRequireDefault(_isomorphicFetch);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// HARDCODED: this should be configurable !
var LOGOUT = exports.LOGOUT = 'LOGOUT';

var isBrowser = function isBrowser() {
  return (typeof __IS_BROWSER__ === 'undefined' ? 'undefined' : _typeof(__IS_BROWSER__)) !== (typeof undefined === 'undefined' ? 'undefined' : _typeof(undefined));
};
var getBrowserUrl = function getBrowserUrl(url) {
  return location.protocol + '//' + location.host + '/' + url;
};

function apiFetch(url, options) {
  var finalUrl = isBrowser() ? getBrowserUrl(url) : 'http://artemisajs.org/' + url;
  return (0, _isomorphicFetch2.default)(finalUrl, options);
}

var compileUrl = exports.compileUrl = function compileUrl(path) {
  var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  return typeof path === 'string' ? path : path(params);
};

function fetchOptions() {
  var method = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'GET';
  var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var authToken = arguments[2];

  var headers = {};
  var body = undefined;
  if (authToken) {
    headers = _extends({}, headers, {
      Authorization: 'Bearer ' + authToken
    });
  }
  if (method === 'POST' || method === 'PUT') {
    if (params.file) {
      body = new FormData();
      Object.keys(params).forEach(function (key) {
        if (key !== 'file') {
          body.append(key, params[key]);
        } else {
          body.append(params[key].name, params[key].file);
        }
      });
    } else {
      headers = _extends({}, headers, {
        'Content-Type': 'application/json',
        Accept: 'application/json'
      });
      body = JSON.stringify(params);
    }
  }
  return { method: method, headers: headers, body: body };
}